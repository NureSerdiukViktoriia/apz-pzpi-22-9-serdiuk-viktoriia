Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії










ЗВІТ
з лабораторної роботи №4












Виконала:                                                                                        Перевірив:               
ст. гр. ПЗПІ-22-9                                                                             Дашенков Д. С.
Сердюк В. С.










Харків 2025
ЛАБОРАТОРНА РОБОТА №4. МАСШТАБУВАННЯ БЕКЕНДА

Весь код проєкту зберігається в репозиторії Git - https://github.com/NureSerdiukViktoriia/apz-pzpi-22-9-serdiuk-viktoriia/tree/main/Lab4

У ході виконання лабораторної роботи реалізувала горизонтальне масштабування бекенд-сервера. Для виконання завдання обрала Docker Compose для запуску трьох екземплярів сервера: campinglb4-backend-1, campinglb4-backend-2 та campinglb4-backend-3. Усі сервери мають однаковий функціонал і підключаються до однієї бази даних. На початковому етапі проєкту використовувалась база даних SQLite, але при реалізації масштабування зробила перехід на MySQL, так як, SQLite не підтримує одночасний доступ з декількох процесів або контейнерів.
Для масштабування застосовано команду: docker-compose up --scale backend=3.
Після запуску, можна спостерігати, що кожен з трьох серверів успішно запустився на порту 5000 та встановив з’єднання з базою даних (рис. 1).
 
Рисунок 1. – Успішний запуск трьох серверів

Код файла Dockerfile:
FROM node:18
RUN apt-get update && apt-get install -y netcat-openbsd
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["node", "app.js"]

Опис коду:
Dockerfile описує, як створити образ для запуску Node.js сервера. Спочатку додається утиліта netcat для перевірки готовності бази даних перед запуском сервера, далі задається робоча папка /app, куди копіюються файли з залежностями, які встановлюються командою npm install. Потім копіюється весь код програми.

Код файла docker-compose.yml:
services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: camping_db
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql

  backend:
    build:
      context: ./server
    depends_on:
      - mysql
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=camping_db
    command: >
      sh -c "until nc -z mysql 3306; do echo 'Waiting for MySQL...'; sleep 2; done && node app.js"

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend

volumes:
  mysql-data:

Опис коду:
docker-compose.yml описує архітектуру системи з трьох сервісів: бази даних mysql, серверної частини backend і nginx. База даних працює на MySQL 8.0 з попередньо створеною БД camping_db, до якої підключається бекенд. Бекенд-сервер збирається з Dockerfile, а nginx виступає зворотним проксі й розподіляє навантаження між усіма екземплярами серверів, перенаправляючи HTTP-запити через порт 8080.

Для перевірки, що всі контейнери справді запущені виконала docker ps і отримала результат:
 
Рисунок 2. – Успішний запуск

Для перевірки роботи масштабування бекенду, здійснила кілька послідовних запитів до сервера за адресою: http://localhost:8080/ У відповідь від системи отримала повідомлення з унікальними ідентифікаторами бекенд-сервера: 
 
 
 
Це підтверджує, що сервер Nginx ефективно розподіляє запити між трьома екземплярами сервера (campinglb4-backend-1, campinglb4-backend-2 та campinglb4-backend-3). Таким чином, система працює у режимі горизонтального масштабування, що забезпечує рівномірне навантаження, підвищує надійність і покращує продуктивність додатку.

Код файла nginx.conf:
events {}

http {
  upstream backend_cluster {
    server campinglb4-backend-1:5000;
    server campinglb4-backend-2:5000;
    server campinglb4-backend-3:5000;
  }

  server {
    listen 8080;

    location / {
      proxy_pass http://backend_cluster;
    }
  }
}

Опис коду:
nginx.conf налаштовує Nginx як проміжний сервер, який приймає запити на порт 8080 і розподіляє їх між трьома серверами бекенду: campinglb4-backend-1, campinglb4-backend-2 і campinglb4-backend-3 на порті 5000. Це допомагає рівномірно розподіляти навантаження і робить систему швидшою та надійнішою.

Навантажувальне тестування проводилось за допомогою Apache JMeter. Для цього були налаштовані HTTP-запити до бекенду, що реалізують основний функціонал системи. Також, було виконано генерацію токена, щоб забезпечити коректний доступ до захищених даних (рис. 3-4).
 
Рисунок 3. – Структура Test Plan
 
Рисунок 4. – HTTP Request для локації

Спочатку був запущений один екземпляр сервера з налаштуваннями (users – 100, seconds – 30, loop count - 100): docker compose up –build.

 
Рисунок 5. – Успішно запущений один екземпляр сервера

 
Рисунок 6. – Навантажувальне тестування з одним еземпляром сервера

Під час навантажувального тестування з одним екземпляром сервера було здійснено 1138 запитів до різних ендпоінтів API. Середній час відповіді становив 1409 мс, а максимальний - 3323 мс. Загальна пропускна здатність склала 36,8 запитів за секунду. Найвищий середній час відповіді 1554 мс був зафіксований на ендпоінті авторизації, що може свідчити про високе навантаження на цей компонент системи. Інші запити мали схожий середній час, у межах 1350–1380 мс, та показували рівень помилок від 7% до понад 10%, а загальний рівень помилок склав 8,8%.

Після цього, було запущено два екземпляри сервера із налаштуванням (users – 100, seconds – 30, loop count - 100): docker-compose up --scale backend=2.
 
Рисунок 7. – Успішно запущені два екземпляри сервера

Рисунок 8. – Навантажувальне тестування із двома екземплярами сервера

Після запуску двох екземплярів сервера покращилась продуктивність системи в порівнянні з тестуванням одного сервера. Загальна кількість оброблених запитів зросла до 1783, а середній час відповіді зменшився до 867 мс. Максимальний час відповіді також зменшився до 2822 мс, а пропускна здатність зросла до 58,7 запитів на секунду, що майже вдвічі перевищує результат із одним сервером. Після виконання тестування, можна зробити висновок, що горизонтальне масштабування значно підвищує продуктивність і зменшує кількість помилок, роблячи систему більш надійною й здатною обслуговувати більше запитів за той самий проміжок часу.

Також були запущені три екземпляри сервера із налаштуванням (users – 100, seconds – 30 loop count - 100): docker-compose up --scale backend=3.

 
Рисунок 9. – Успішно запущені три екземпляри сервера
Рисунок 10. – Навантажувальне тестування із трьома екземплярами сервера

При запуску трьох серверів кількість запитів зросла до 1794, середній час відповіді покращився до 854 мс, а пропускна здатність збільшилась до 59,3 запитів. Рівень помилок залишився на стабільному рівні близько 5,6%. Після виконання тестування, можна зробити висновок, що масштабування серверів підвищує продуктивність і стабільність системи.

Висновок: У ході виконання роботи реалізувала горизонтальне масштабування системи за допомогою Docker Compose, що дозволило запустити кілька екземплярів бекенд-сервера з балансуванням навантаження через Nginx. Для забезпечення паралельного доступу було також змінено СУБД з SQLite на MySQL.
